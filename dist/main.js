!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent=" ",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_disableButton(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._inactiveButtonClass)}_enableButton(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._inactiveButtonClass)}_toggleButtonState=()=>{this._hasInvalidInput()?this._disableButton():this._enableButton()};_setEventListeners(e){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._disableButton()}}class t{constructor(e,t,s){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._cardElement.remove()})),this._modalImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._modalImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__description-text"),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._modalImage.src=this.link,this._modalImage.alt=this.name,this._cardTitle.textContent=this.name,this._setEventListeners(),this._cardElement}}const s=document.querySelector("#profile-edit-button"),o=document.querySelector("#profile-edit-modal"),r=(document.querySelector(".profile__title"),document.querySelector("#profile-description"),document.querySelector("#profile-title-input")),n=document.querySelector("#profile-description-input"),i=(document.forms["modal-form"],document.querySelector("#add-card-modal")),l=(document.querySelector("#card-title-input"),document.querySelector("#add-card-form")),a=(document.querySelector("#url-input"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".cards__list"),document.querySelector("#preview-modal")),c=(a.querySelector(".modal__image"),a.querySelector(".modal__caption"),i.querySelector("#card-save-button"),document.querySelector("#add-card-button")),u=(document.querySelectorAll(".modal__close-button"),{inputSelector:".modal__form-input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"});class d{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._popupCloseButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleClickOut(e){e.target.classList.contains("modal")&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._popupCloseButton&&this._popupCloseButton.addEventListener("click",(()=>{this.close()}))}}class m extends d{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputList=this._popupElement.querySelectorAll(".modal__form-input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}reset(){this._popupForm.reset()}}const p=new e(u,o),_=new e(u,l),h=new class extends d{constructor(e){let{popupSelector:t}=e;super({popupSelector:t})}open(e){let{name:t,link:s}=e;const o=this._popupElement.querySelector(".modal__image");if(o){const e=this._popupElement.querySelector(".modal__caption");o.src=s,o.alt=t,e.textContent=t,super.open()}else console.error("Image element not found in popup:",this._popupElement)}}({popupSelector:".modal__image"}),E=e=>{let{name:t,link:s}=e;h.open({name:t,link:s})},S=new class{constructor(e){let{profileTitleSelector:t,profileDescriptionSelector:s}=e;this._title=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return{title:this._title.textContent,description:this._description.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._title.textContent=t,this._description.textContent=s}}({profileTitleSelector:".profile__title",profileDescriptionSelector:".profile__description"});S.getUserInfo();const v=new m({popupSelector:"#profile-edit-modal",handleFormSubmit:e=>{!function(e){let{title:t,description:s}=e;S.setUserInfo({title:t,description:s}),profileEditModal.close()}(e)}}),f=new m({popupSelector:"#add-card-modal",handleFormSubmit:e=>{console.trace(e),g.addItem(y(e)),l.reset(),_.resetValidation()}}),g=new class{constructor(e,t){let{items:s,renderer:o}=e;this._renderer=o,this._container=document.querySelector(t),this._items=s}renderItems(e){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=y(e);g.addItem(t)}},".cards__list");function y(e){let{name:s,link:o}=e;return new t({name:s,link:o},"#card-template",E).getView()}g.renderItems(),_.enableValidation(),p.enableValidation(),h.setEventListeners(),v.setEventListeners(),f.setEventListeners(),s.addEventListener("click",(function(){v.open();const e=S.getUserInfo();r.value=e.title.trim(),n.value=e.description.trim()})),c.addEventListener("click",(function(){f.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,