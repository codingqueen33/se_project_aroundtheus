!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent=" ",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}disableButton(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._inactiveButtonClass)}_enableButton(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._inactiveButtonClass)}_toggleButtonState=()=>{this._hasInvalidInput()?this.disableButton():this._enableButton()};_setEventListeners(e){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this.disableButton()}}class t{constructor(e,t,s){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._cardElement.remove()})),this._modalImage.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._modalImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__description-text"),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._modalImage.src=this.link,this._modalImage.alt=this.name,this._cardTitle.textContent=this.name,this._setEventListeners(),this._cardElement}}const s=document.querySelector("#profile-edit-button"),o=(document.querySelector("#profile-edit-modal"),document.querySelector(".profile__title"),document.querySelector("#profile-description"),document.querySelector("#profile-title-input")),n=document.querySelector("#profile-description-input"),r=document.forms["modal-form"],i=document.querySelector("#add-card-modal"),l=(document.querySelector("#card-title-input"),document.querySelector("#add-card-form")),a=(document.querySelector("#url-input"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".cards__list"),document.querySelector("#preview-modal")),c=(a.querySelector(".modal__image"),a.querySelector(".modal__caption"),i.querySelector("#card-save-button"),document.querySelector("#add-card-button")),u=(document.querySelectorAll(".modal__close-button"),{inputSelector:".modal__form-input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"});class d{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._popupCloseButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement?(this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)):console.error("Popup element not found:",this._popupElement)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleClickOut(e){e.target.classList.contains("modal")&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._popupCloseButton&&this._popupCloseButton.addEventListener("click",(()=>{this.close()}))}}class p extends d{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputList=this._popupElement.querySelectorAll(".modal__form-input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}reset(){this._popupForm.reset()}}const m=new e(u,r),_=new e(u,l),h=new class extends d{constructor(e){let{popupSelector:t}=e;super({popupSelector:t})}open(e){let{name:t,link:s}=e;const o=this._popupElement.querySelector(".modal__image"),n=this._popupElement.querySelector(".modal__caption");o&&n?(o.alt=t,o.src=s,n.textContent=t,super.open()):console.error("Image or caption not found:",this._popupElement)}}({popupSelector:"#preview-modal"}),E=e=>{let{name:t,link:s}=e;h.open({name:t,link:s})},S=new class{constructor(e){let{profileTitleSelector:t,profileDescriptionSelector:s}=e;this._title=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return{title:this._title.textContent,description:this._description.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._title.textContent=t,this._description.textContent=s}}({profileTitleSelector:".profile__title",profileDescriptionSelector:".profile__description"}),v=new p({popupSelector:"#profile-edit-modal",handleFormSubmit:function(e){let{title:t,description:s}=e;S.setUserInfo({title:t,description:s}),v.close()}}),f=new class{constructor(e,t){let{items:s,renderer:o}=e;this._items=s,this._renderer=o,this.container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this.container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=g(e);f.addItem(t)}},".cards__list"),y=new p({popupSelector:"#add-card-modal",handleFormSubmit:e=>{const{title:t,url:s}=e;f.addItem(g({name:t,link:s})),y.reset(),_.disableButton()}});function g(e){let{name:s,link:o}=e;return new t({name:s,link:o},"#card-template",E).getView()}f.renderItems(),_.enableValidation(),m.enableValidation(),h.setEventListeners(),v.setEventListeners(),y.setEventListeners(),s.addEventListener("click",(function(){v.open();const e=S.getUserInfo();o.value=e.title.trim(),n.value=e.description.trim()})),c.addEventListener("click",(function(){y.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,